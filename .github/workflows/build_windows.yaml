name: Build Windows msix

on:
  workflow_call:
  workflow_dispatch:

env:
    DOTNETVERSION: 8.0.204
jobs:
  create_runner:
    name: Deploy Self Hosted Runner
    runs-on: [self-hosted, ubuntu-latest]
    steps:
        - name: Checkout code
          uses: actions/checkout@v2
        - name: Clone VM
          id: pull
          uses: parallels/parallels-desktop-github-action@v1
          with:
            operation: 'clone'
            username: ${{ secrets.PARALLELS_USERNAME }}
            password: ${{ secrets.PARALLELS_PASSWORD }}
            insecure: true
            host_url: home.carloslapao.com:5470
            base_vm: Maui_DevBox
            start_after_op: true
        - name: Configure Github Runner
          id: configure  
          uses: parallels/parallels-desktop-github-action@v1
          with:
            max_attempts: 5
            timeout_seconds: 2
            operation: 'run'
            username: ${{ secrets.PARALLELS_USERNAME }}
            password: ${{ secrets.PARALLELS_PASSWORD }}
            host_url: home.carloslapao.com:5470
            insecure: true
            machine_name: ${{ steps.pull.outputs.vm_id }}
            run: |
                curl -o c:\install-runner.ps1 https://raw.githubusercontent.com/Parallels/prlctl-scripts/main/github/actions-runner/windows/install-runner.ps1
                curl -o c:\configure-runner.ps1 https://raw.githubusercontent.com/Parallels/prlctl-scripts/main/github/actions-runner/windows/configure-runner.ps1
                curl -o c:\remove-runner.ps1 https://raw.githubusercontent.com/Parallels/prlctl-scripts/main/github/actions-runner/windows/remove-runner.ps1

                powershell c:\install-runner.ps1
                powershell c:\configure-runner.ps1 -o Locally-build -t ${{ secrets.GH_PAT }} -n ${{ github.run_id }}_builder -l ${{ github.run_id }}_builder
    outputs:
        vm_id: ${{ steps.pull.outputs.vm_id }}
        vm_name: ${{ steps.pull.outputs.vm_name }}
  buildWindows:
    name: Build Windows msix
    needs: create_runner
    runs-on: 
        - self-hosted
        - Windows
        - ${{ github.run_id }}_builder
    steps:
      - uses: actions/checkout@v2     
      - name: Setup .NET SDK ${{env.DOTNETVERSION}}
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '${{env.DOTNETVERSION}}'
          
      - name: Install .NET MAUI
        shell: pwsh
        run: |
          & dotnet nuget locals all --clear
          & dotnet workload install maui --source https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet7/nuget/v3/index.json --source https://api.nuget.org/v3/index.json
          & dotnet workload install android ios maccatalyst tvos macos maui wasm-tools maui-maccatalyst --source https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet7/nuget/v3/index.json --source https://api.nuget.org/v3/index.json
      
      # https://docs.microsoft.com/en-us/dotnet/maui/windows/deployment/overview
      - name: Build Windows MSIX
        run: |
          dotnet publish -f net8.0-windows10.0.19041.0 -c Release 
          
#       - name: Build and Run UnitTests
#         shell: bash
#         run: |
#           dotnet build <path to unit test csproj>
#           dotnet test <path to unit test csproj> --no-build --verbosity normal

    #   # https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/certutil
    #   # commandline util to encode to base64 on windows
    #   - name: Create signing pfx file from secrets
    #     shell: pwsh
    #     id: secret-file
    #     env:
    #       SECRET_DATA1: ${{ secrets.WIN_SIGN_CERT }}
    #     run: |
    #       $secretFile = "WinSignCert.pfx"; 
    #       $encodedBytes = [System.Convert]::FromBase64String($env:SECRET_DATA1); 
    #       Set-Content $secretFile -Value $encodedBytes -AsByteStream;
    #       Write-Output "::set-output name=SECRET_FILE::$secretFile";
    #       Write-Output " ";
    #       Write-Output "CHECK FILE EXISTS";
    #       Write-Output " ";
    #       ls

    #   # https://docs.microsoft.com/en-us/windows/msix/desktop/azure-dev-ops
    #   - name: Sign Windows App
    #     shell: pwsh
    #     env:
    #       CERT_PASSWORD: ${{ secrets.WIN_CERT_PASSWORD }}
    #     run: |
    #       '"C:\Program Files (x86)\Windows Kits\10\App Certification Kit\SignTool" sign /a /fd SHA256 /f WinSignCert.pfx /p ($env:CERT_PASSWORD) 6.0\Apps\WeatherTwentyOne\src\WeatherTwentyOne\bin\Release\net7.0-windows10.0.19041.0\win10-x64\AppPackages\WeatherTwentyOne_1.0.0.0_TestWeatherTwentyOne_1.0.0.0_x64.msix'

      - uses: actions/upload-artifact@v2
        with:
          name: artifacts-windows
          path: |
            bin\Release\**\*.msix
  clean_runner:
    if: always()
    needs: 
    - buildWindows
    - create_runner
    name: Clean Runner
    runs-on: ubuntu-latest
    steps:
        - name: Remove Github Runner
          id: configure  
          uses: parallels/parallels-desktop-github-action@v1
          with:
            operation: 'run'
            username: ${{ secrets.PARALLELS_USERNAME }}
            password: ${{ secrets.PARALLELS_PASSWORD }}
            host_url: home.carloslapao.com:5470
            insecure: true
            machine_name: ${{ needs.create_runner.outputs.vm_id }}
            run: |
                powershell c:\remove-runner.sh -o Locally-build -t ${{ secrets.GH_PAT }}
        - name: Remove VM
          if: always()
          id: remove
          uses: parallels/parallels-desktop-github-action@v1
          with:
            operation: 'delete'
            username: ${{ secrets.PARALLELS_USERNAME }}
            password: ${{ secrets.PARALLELS_PASSWORD }}
            insecure: true
            host_url: home.carloslapao.com:5470
            machine_name: ${{ needs.create_runner.outputs.vm_id }}